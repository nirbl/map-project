{"version":3,"sources":["components/map-cmp.js","components/map-state-manager.js","App.js","serviceWorker.js","index.js"],"names":["MyMapComponent","withScriptjs","withGoogleMap","_ref","isMarkerShown","markers","center","defaultCenter","react_default","a","createElement","lib","defaultZoom","map","marker","idx","key","position","label","MapStateManager","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","lat","lng","title","className","map_cmp","googleMapURL","loadingElement","style","height","containerElement","mapElement","Component","App","map_state_manager","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAsBeA,EAlBQC,uBAAaC,wBAAc,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,cAAeC,EAAlBF,EAAkBE,QAAuBC,GAAzCH,EAA2BI,cAA3BJ,EAAyCG,QAAzC,OAE9CE,EAAAC,EAAAC,cAACC,EAAA,UAAD,CACIC,YAAa,GAEbN,OAAQA,GAGJF,GACAC,EAAQQ,IAAI,SAACC,EAAOC,GAAR,OAAgBP,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAC5BK,IAAKD,EACLE,SAAUH,EAAOG,SAEjBC,MAAOJ,EAAOI,cC2BXC,cAvCX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACTrB,OAAQ,CAAEsB,IAAK,UAAWC,KAAM,SAChCxB,QAAS,CACL,CAAEY,SAAU,CAAEW,IAAK,KAAMC,KAAM,KAAQX,MAAO,SAAUY,MAAO,UAC/D,CAAEb,SAAU,CAAEW,IAAK,GAAIC,IAAK,IAAMX,MAAO,gBAAiBY,MAAO,iBACjE,CAAEb,SAAU,CAAEW,IAAK,GAAIC,IAAK,IAAMX,MAAO,gBAAiBY,MAAO,iBACjE,CAAEb,SAAU,CAAEW,IAAK,GAAIC,IAAK,IAAMX,MAAO,gBAAiBY,MAAO,iBACjE,CAAEb,SAAU,CAAEW,IAAK,GAAIC,IAAK,IAAMX,MAAO,gBAAiBY,MAAO,iBACjE,CAAEb,SAAU,CAAEW,IAAK,GAAIC,IAAK,IAAMX,MAAO,gBAAiBY,MAAO,mBAV/DV,kTAqBL,IACGf,EAAYkB,KAAKI,MAAjBtB,QACR,OACIG,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,OACXvB,EAAAC,EAAAC,cAACsB,EAAD,CACI5B,eAAa,EACbC,QAASA,EACT4B,aAAa,gIACbC,eAAgB1B,EAAAC,EAAAC,cAAA,OAAKyB,MAAO,CAAEC,OAAM,UACpCC,iBAAkB7B,EAAAC,EAAAC,cAAA,OAAKyB,MAAO,CAAEC,OAAM,WACtCE,WAAY9B,EAAAC,EAAAC,cAAA,OAAKyB,MAAO,CAAEC,OAAM,UAChC9B,OAAQiB,KAAKI,MAAMrB,iBAjCTiC,aCUfC,mLARX,OACEhC,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,OACbvB,EAAAC,EAAAC,cAAC+B,EAAD,cAJUF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.986fd2e5.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\"\r\n\r\n\r\nconst MyMapComponent = withScriptjs(withGoogleMap(({ isMarkerShown, markers, defaultCenter,center }) =>\r\n\r\n    <GoogleMap\r\n        defaultZoom={15}\r\n        // defaultCenter={defaultCenter}\r\n        center={center}\r\n    >\r\n        {\r\n            isMarkerShown &&\r\n            markers.map((marker,idx) => <Marker \r\n            key={idx} \r\n            position={marker.position} \r\n            // title={marker.title} \r\n            label={marker.label} />)\r\n        }\r\n    </GoogleMap>\r\n))\r\n\r\nexport default MyMapComponent","import React, { Component } from 'react';\r\nimport MyMapComponent from './map-cmp'\r\n\r\n\r\nclass MapStateManager extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            center: { lat: 51.461674, lng: -0.073542 },\r\n            markers: [\r\n                { position: { lat: 51.5, lng: -0.09 }, label: 'asdasd', title: 'asdasd' },\r\n                { position: { lat: 35, lng: 34 }, label: 'flkjhnldkfgnh', title: 'flkjhnldkfgnh' },\r\n                { position: { lat: 36, lng: 34 }, label: 'flkjhnldkfgnh', title: 'flkjhnldkfgnh' },\r\n                { position: { lat: 37, lng: 34 }, label: 'flkjhnldkfgnh', title: 'flkjhnldkfgnh' },\r\n                { position: { lat: 38, lng: 34 }, label: 'flkjhnldkfgnh', title: 'flkjhnldkfgnh' },\r\n                { position: { lat: 34, lng: 36 }, label: 'flkjhnldkfgnh', title: 'flkjhnldkfgnh' },\r\n            ]\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        // await navigator.geolocation.getCurrentPosition(async (position) => {\r\n        //     await this.setState({ center: { lat: position.coords.latitude, lng: +position.coords.longitude } })\r\n        // })\r\n    }\r\n\r\n    render() {\r\n        const { markers } = this.state\r\n        return (\r\n            <div className=\"App\">\r\n                <MyMapComponent\r\n                    isMarkerShown\r\n                    markers={markers}\r\n                    googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDrvlLEZx4_vYizhbzaIy1un8VEIqo5BAk&v=3.exp&libraries=geometry,drawing,places\"\r\n                    loadingElement={<div style={{ height: `100%` }} />}\r\n                    containerElement={<div style={{ height: `400px` }} />}\r\n                    mapElement={<div style={{ height: `100%` }} />}\r\n                    center={this.state.center}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MapStateManager","import React, { Component } from 'react';\nimport './App.css';\nimport MapStateManager from './components/map-state-manager'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <MapStateManager />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}